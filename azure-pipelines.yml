variables:
  DEVELOPER_DIR: "/Applications/Xcode_9.3.1.app"
jobs:
- job: build_osx
  pool:
    vmImage: 'macOS-10.13'
  timeoutInMinutes: 120
  steps:
# ここで、各サブモジュールのビルド済みバイナリをDL
# なければビルド
# また、FORCE_BUILDが指定されているときは、DLしない
# ------------------------------------------ 
# 別の script では、ディレクトリ位置や環境変数のexportは保存されない（別のbashが起動される）
# 環境変数を受け渡すには、先のscriptで
# `echo '##vso[task.setvariable variable=<varname>]<value>'`
# を実行し、続くscriptで
# `env: { varname: $<varname> }`
# を指定する
  - script: brew install libtool automake
    displayName: brew install
  - script: git submodule update --init
  - script: |
      echo "##vso[task.setvariable variable=wxwidgets_hash]$(cd ./ext/wxWidgets && git rev-parse HEAD)"
      echo "##vso[task.setvariable variable=vst3sdk_hash]$(cd ./ext/vst3sdk && git rev-parse HEAD)"
      echo "##vso[task.setvariable variable=protobuf_hash]$(cd ./ext/protobuf && git rev-parse HEAD)"
      echo "##vso[task.setvariable variable=portaudio_hash]$(cd ./ext/portaudio && git rev-parse HEAD)"
      echo "##vso[task.setvariable variable=fmtlib_hash]$(cd ./ext/fmt && git rev-parse HEAD)"
      echo "##vso[task.setvariable variable=rtmidi_hash]$(cd ./ext/rtmidi && git rev-parse HEAD)"
    displayName: listup hashes
  - script: printenv
    displayName: printenv without env setting
  - script: |
      echo ${WXWIDGETS_HASH}
      echo ${VST3SDK_HASH}
    displayName: show variables without env setting
  - script: printenv
    env: { 
      WXWIDGETS_HASH: $WXWIDGETS_HASH,
      VST3SDK_HASH: $VST3SDK_HASH,
      PROTOBUF_HASH: $PROTOBUF_HASH,
      PORTAUDIO_HASH: $PORTAUDIO_HASH,
      FMTLIB_HASH: $FMTLIB_HASH,
      RTMIDI_HASH: $RTMIDI_HASH,
    }
    displayName: printenv
  - script: cd gradle && ./gradlew update_submodules
    displayName: update submodues
  - bash: "cd $(System.DefaultWorkingDirectory)/Terra && echo execute bash script && printenv && pwd"
    displayName: printenv2
  - script: cd gradle && ./gradlew build_all -Pconfig=Release
    displayName: build_all
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/build_release/Release'
      artifactName: Binary
- job: deploy
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: "Download Artifacts"
    inputs:
      artifactName: Binary
  dependsOn: build_osx
  condition: succeeded()
